import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class L18 {
    /**
     * 18. 4Sum
     * 
     * Given an array nums of n integers and an integer target, are there elements
     * a, b, c, and d in nums such that a + b + c + d = target? 
     * Find all unique quadruplets in the array which gives the sum of target.
     * 
     * Note:
     * 
     * The solution set must not contain duplicate quadruplets.
     * 
     * Example:
     * 
     * Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
     * 
     * A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]
     */
  

    public static void main(String[] args) {
        System.out.println("Hello world!");
        int[] nums = new int[]{ 1, 0, -1, 0, -2, 2};
        int target = 0;
        System.out.println(L18.fourSum(nums,target));
    }

    public static List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>  result = new ArrayList<List<Integer>>();
        if(nums== null || nums.length < 4) return result;
        Arrays.sort(nums);// 
        for(int i = 0; i < nums.length-3;i++){
            if(i!=0 && nums[i-1] == nums[i]) continue;
            for(int j = i+ 1 ; j < nums.length-2 ; j++){
                if (j != i + 1 && nums[j - 1] == nums[j]) continue;
                int local = target - nums[i] -nums[j];
                int m = j+1,n=nums.length-1;
                while(m < n){
                    if(local == (nums[m]+nums[n])){
                        result.add(Arrays.asList(nums[m],nums[n],nums[i],nums[j]));
                        m++;
                        n--;
                        while (m < n && nums[m] == nums[m - 1]) {
                            m++;
                        }
                        while (m < n && nums[n] == nums[n + 1]) {
                            n--;
                        }
                    }else if(local > (nums[m] + nums[n])){
                        m++;
                    }else{
                        n--; 
                    }
                }
            }

        }
        return result;

    }
}

General Idea
If you have already read and implement the 3sum and 4sum by using the sorting approach: 
reduce them into 2sum at the end, you might already got the feeling that, 
all ksum problem can be divided into two problems:

1. 2sum Problem
2. Reduce K sum problem to K – 1 sum Problem

Therefore, the ideas is simple and straightforward. We could use recursive to solve this problem. 
Time complexity is O(N^(K-1)).

 public class Solution {
        int len = 0;
        public List<List<Integer>> fourSum(int[] nums, int target) {
            len = nums.length;
            Arrays.sort(nums);
            return kSum(nums, target, 4, 0);
        }
       private ArrayList<List<Integer>> kSum(int[] nums, int target, int k, int index) {
            ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
            if(index >= len) {
                return res;
            }
            if(k == 2) {
            	int i = index, j = len - 1;
            	while(i < j) {
                    //find a pair
            	    if(target - nums[i] == nums[j]) {
            	    	List<Integer> temp = new ArrayList<>();
                    	temp.add(nums[i]);
                    	temp.add(target-nums[i]);
                        res.add(temp);
                        //skip duplication
                        while(i<j && nums[i]==nums[i+1]) i++;
                        while(i<j && nums[j-1]==nums[j]) j--;
                        i++;
                        j--;
                    //move left bound
            	    } else if (target - nums[i] > nums[j]) {
            	        i++;
                    //move right bound
            	    } else {
            	        j--;
            	    }
            	}
            } else{
                // index,DFS，recursive
                for (int i = index; i < len - k + 1; i++) {
                    //use current number to reduce ksum into k-1sum
                    ArrayList<List<Integer>> temp = kSum(nums, target - nums[i], k-1, i+1);
                    // 结果的处理也是一级的棒
                    if(temp != null){
                        //add previous results
                        for (List<Integer> t : temp) {
                            t.add(0, nums[i]);
                        }
                        res.addAll(temp);
                    }

                    while (i < len-1 && nums[i] == nums[i+1]) {
                        //skip duplicated numbers
                        i++;
                    }
                }
            }
            return res;
        }
    }

